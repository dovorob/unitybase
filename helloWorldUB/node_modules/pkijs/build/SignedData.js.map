{"version":3,"sources":["../src/SignedData.js"],"names":["asn1js","SignedData","parameters","version","defaultValues","digestAlgorithms","encapContentInfo","certificates","crls","signerInfos","fromSchema","schema","asn1","compareSchema","verified","Error","result","valueBlock","valueDec","Array","from","algorithm","certificate","idBlock","tagClass","tagNumber","crl","signerInfoSchema","encodeFlag","outputArray","push","Integer","value","Set","toSchema","Constructed","certificateSchema","crlSchema","signerInfo","Sequence","_object","toJSON","signer","data","ArrayBuffer","trustedCerts","checkDate","Date","checkChain","includeSignerCertificate","extendedMode","sequence","Promise","resolve","messageDigestValue","publicKey","shaAlgorithm","signerCertificate","timestampSerial","certificatePath","crypto","reject","date","code","message","signatureVerified","signerCertificateVerified","sid","then","issuer","isEqual","serialNumber","all","filter","digest","name","Uint8Array","subjectPublicKeyInfo","subjectPublicKey","valueHex","entries","index","results","eContentType","fromBER","eContent","tstInfo","ex","genTime","byteLength","verify","checkCA","cert","isCA","extensions","extension","extnID","parsedValue","cA","promiseResults","certificateChainEngine","certs","_result","otherRevInfoFormat","ocsps","otherRevInfo","verificationResult","resultMessage","error","Object","signerInfoHashAlgorithm","digestAlgorithm","algorithmId","isConstructed","contentValue","valueBeforeDecode","foundContentType","foundMessageDigest","signedAttrs","attributes","attribute","type","values","signatureAlgorithm","algorithmObject","hash","algorithmParamsChecked","algorithmParams","curveObject","toString","namedCurve","publicKeyInfoSchema","publicKeyInfoBuffer","toBER","publicKeyInfoView","importKey","usages","encodedValue","pssParameters","saltLength","hashName","hashAlgorithm","signatureValue","signature","privateKey","signerIndex","engine","hashAlgorithmOID","length","Null","subtle","getSignatureParameters","view","content","signWithPrivateKey","OctetString","memberName","memberValue","names","optional","blockName","Repeated"],"mappings":"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","file":"SignedData.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, utilConcatBuf, isEqualBuffer } from \"pvutils\";\r\nimport {\r\n\tgetCrypto,\r\n\tgetEngine,\r\n\tgetOIDByAlgorithm,\r\n\tgetAlgorithmByOID,\r\n\tcreateECDSASignatureFromCMS,\r\n\tgetAlgorithmParameters\r\n} from \"./common\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier\";\r\nimport EncapsulatedContentInfo from \"./EncapsulatedContentInfo\";\r\nimport Certificate from \"./Certificate\";\r\nimport OtherCertificateFormat from \"./OtherCertificateFormat\";\r\nimport CertificateRevocationList from \"./CertificateRevocationList\";\r\nimport OtherRevocationInfoFormat from \"./OtherRevocationInfoFormat\";\r\nimport SignerInfo from \"./SignerInfo\";\r\nimport CertificateSet from \"./CertificateSet\";\r\nimport RevocationInfoChoices from \"./RevocationInfoChoices\";\r\nimport IssuerAndSerialNumber from \"./IssuerAndSerialNumber\";\r\nimport TSTInfo from \"./TSTInfo\";\r\nimport CertificateChainValidationEngine from \"./CertificateChainValidationEngine\";\r\nimport BasicOCSPResponse from \"./BasicOCSPResponse\";\r\nimport RSASSAPSSParams from \"./RSASSAPSSParams\";\r\nimport AttributeCertificateV1 from \"./AttributeCertificateV1\";\r\nimport AttributeCertificateV2 from \"./AttributeCertificateV2\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5652\r\n */\r\nexport default class SignedData \r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for SignedData class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @description version\r\n\t\t */\r\n\t\tthis.version = getParametersValue(parameters, \"version\", SignedData.defaultValues(\"version\"));\r\n\t\t/**\r\n\t\t * @type {Array.<AlgorithmIdentifier>}\r\n\t\t * @description digestAlgorithms\r\n\t\t */\r\n\t\tthis.digestAlgorithms = getParametersValue(parameters, \"digestAlgorithms\", SignedData.defaultValues(\"digestAlgorithms\"));\r\n\t\t/**\r\n\t\t * @type {EncapsulatedContentInfo}\r\n\t\t * @description encapContentInfo\r\n\t\t */\r\n\t\tthis.encapContentInfo = getParametersValue(parameters, \"encapContentInfo\", SignedData.defaultValues(\"encapContentInfo\"));\r\n\t\t\r\n\t\tif(\"certificates\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<Certificate|OtherCertificateFormat>}\r\n\t\t\t * @description certificates\r\n\t\t\t */\r\n\t\t\tthis.certificates = getParametersValue(parameters, \"certificates\", SignedData.defaultValues(\"certificates\"));\r\n\t\t\r\n\t\tif(\"crls\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<CertificateRevocationList|OtherRevocationInfoFormat>}\r\n\t\t\t * @description crls\r\n\t\t\t */\r\n\t\t\tthis.crls = getParametersValue(parameters, \"crls\", SignedData.defaultValues(\"crls\"));\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {Array.<SignerInfo>}\r\n\t\t * @description signerInfos\r\n\t\t */\r\n\t\tthis.signerInfos = getParametersValue(parameters, \"signerInfos\", SignedData.defaultValues(\"signerInfos\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn 0;\r\n\t\t\tcase \"digestAlgorithms\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"encapContentInfo\":\r\n\t\t\t\treturn new EncapsulatedContentInfo();\r\n\t\t\tcase \"certificates\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"crls\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"signerInfos\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for SignedData class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn (memberValue === SignedData.defaultValues(\"version\"));\r\n\t\t\tcase \"encapContentInfo\":\r\n\t\t\t\treturn new EncapsulatedContentInfo();\r\n\t\t\tcase \"digestAlgorithms\":\r\n\t\t\tcase \"certificates\":\r\n\t\t\tcase \"crls\":\r\n\t\t\tcase \"signerInfos\":\r\n\t\t\t\treturn (memberValue.length === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for SignedData class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//SignedData ::= SEQUENCE {\r\n\t\t//    version CMSVersion,\r\n\t\t//    digestAlgorithms DigestAlgorithmIdentifiers,\r\n\t\t//    encapContentInfo EncapsulatedContentInfo,\r\n\t\t//    certificates [0] IMPLICIT CertificateSet OPTIONAL,\r\n\t\t//    crls [1] IMPLICIT RevocationInfoChoices OPTIONAL,\r\n\t\t//    signerInfos SignerInfos }\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [optional]\r\n\t\t * @property {string} [digestAlgorithms]\r\n\t\t * @property {string} [encapContentInfo]\r\n\t\t * @property {string} [certificates]\r\n\t\t * @property {string} [crls]\r\n\t\t * @property {string} [signerInfos]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\tif((\"optional\" in names) === false)\r\n\t\t\tnames.optional = false;\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"SignedData\"),\r\n\t\t\toptional: names.optional,\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ name: (names.version || \"SignedData.version\") }),\r\n\t\t\t\tnew asn1js.Set({\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tname: (names.digestAlgorithms || \"SignedData.digestAlgorithms\"),\r\n\t\t\t\t\t\t\tvalue: AlgorithmIdentifier.schema()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t}),\r\n\t\t\t\tEncapsulatedContentInfo.schema(names.encapContentInfo || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"SignedData.encapContentInfo\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: CertificateSet.schema(names.certificates || {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tcertificates: \"SignedData.certificates\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}).valueBlock.value\r\n\t\t\t\t}), // IMPLICIT CertificateSet\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: RevocationInfoChoices.schema(names.crls || {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tcrls: \"SignedData.crls\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}).valueBlock.value\r\n\t\t\t\t}), // IMPLICIT RevocationInfoChoices\r\n\t\t\t\tnew asn1js.Set({\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tname: (names.signerInfos || \"SignedData.signerInfos\"),\r\n\t\t\t\t\t\t\tvalue: SignerInfo.schema()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tSignedData.schema()\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for SignedData\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.version = asn1.result[\"SignedData.version\"].valueBlock.valueDec;\r\n\t\t\r\n\t\tif(\"SignedData.digestAlgorithms\" in asn1.result) // Could be empty SET of digest algorithms\r\n\t\t\tthis.digestAlgorithms = Array.from(asn1.result[\"SignedData.digestAlgorithms\"], algorithm => new AlgorithmIdentifier({ schema: algorithm }));\r\n\t\t\r\n\t\tthis.encapContentInfo = new EncapsulatedContentInfo({ schema: asn1.result[\"SignedData.encapContentInfo\"] });\r\n\t\t\r\n\t\tif(\"SignedData.certificates\" in asn1.result)\r\n\t\t{\r\n\t\t\tthis.certificates = Array.from(asn1.result[\"SignedData.certificates\"], certificate =>\r\n\t\t\t{\r\n\t\t\t\tswitch(certificate.idBlock.tagClass)\r\n\t\t\t\t{\r\n\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\treturn new Certificate({ schema: certificate });\r\n\t\t\t\t\tcase 3:\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tconst tagNumber = certificate.idBlock.tagNumber;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t//region Create SEQUENCE from [x]\r\n\t\t\t\t\t\t\tcertificate.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\t\t\t\t\t\tcertificate.idBlock.tagNumber = 16; // SEQUENCE\r\n\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tswitch(tagNumber)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t//region ExtendedCertificate\r\n\t\t\t\t\t\t\t\tcase 0:\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t\t//region AttributeCertificateV1\r\n\t\t\t\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\t\t\t\treturn new AttributeCertificateV1({ schema: certificate });\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t\t//region AttributeCertificateV2\r\n\t\t\t\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\t\t\t\treturn new AttributeCertificateV2({ schema: certificate });\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t\t//region OtherCertificateFormat\r\n\t\t\t\t\t\t\t\tcase 3:\r\n\t\t\t\t\t\t\t\t\treturn new OtherCertificateFormat({ schema: certificate });\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t\t//region default\r\n\t\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\t\tthrow new Error(\"Object's schema was not verified against input data for SignedData\");\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tthrow new Error(\"Object's schema was not verified against input data for SignedData\");\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\treturn new Certificate();\r\n\t\t\t});\r\n\t\t}\r\n\t\t\r\n\t\tif(\"SignedData.crls\" in asn1.result)\r\n\t\t{\r\n\t\t\tthis.crls = Array.from(asn1.result[\"SignedData.crls\"], crl =>\r\n\t\t\t{\r\n\t\t\t\tif(crl.idBlock.tagClass === 1)\r\n\t\t\t\t\treturn new CertificateRevocationList({ schema: crl });\r\n\t\t\t\t\r\n\t\t\t\t//region Create SEQUENCE from [1]\r\n\t\t\t\tcrl.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\t\t\tcrl.idBlock.tagNumber = 16; // SEQUENCE\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\treturn new OtherRevocationInfoFormat({ schema: crl });\r\n\t\t\t});\r\n\t\t}\r\n\t\t\r\n\t\tif(\"SignedData.signerInfos\" in asn1.result) // Could be empty SET SignerInfos\r\n\t\t\tthis.signerInfos = Array.from(asn1.result[\"SignedData.signerInfos\"], signerInfoSchema => new SignerInfo({ schema: signerInfoSchema }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema(encodeFlag = false)\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\toutputArray.push(new asn1js.Integer({ value: this.version }));\r\n\t\t\r\n\t\t//region Create array of digest algorithms\r\n\t\toutputArray.push(new asn1js.Set({\r\n\t\t\tvalue: Array.from(this.digestAlgorithms, algorithm => algorithm.toSchema(encodeFlag))\r\n\t\t}));\r\n\t\t//endregion\r\n\t\t\r\n\t\toutputArray.push(this.encapContentInfo.toSchema());\r\n\t\t\r\n\t\tif(\"certificates\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: Array.from(this.certificates, certificate =>\r\n\t\t\t\t{\r\n\t\t\t\t\tif(certificate instanceof OtherCertificateFormat)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconst certificateSchema = certificate.toSchema(encodeFlag);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tcertificateSchema.idBlock.tagClass = 3;\r\n\t\t\t\t\t\tcertificateSchema.idBlock.tagNumber = 3;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\treturn certificateSchema;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn certificate.toSchema(encodeFlag);\r\n\t\t\t\t})\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\tif(\"crls\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: Array.from(this.crls, crl =>\r\n\t\t\t\t{\r\n\t\t\t\t\tif(crl instanceof OtherRevocationInfoFormat)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconst crlSchema = crl.toSchema(encodeFlag);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tcrlSchema.idBlock.tagClass = 3;\r\n\t\t\t\t\t\tcrlSchema.idBlock.tagNumber = 1;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\treturn crlSchema;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn crl.toSchema(encodeFlag);\r\n\t\t\t\t})\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\t//region Create array of signer infos\r\n\t\toutputArray.push(new asn1js.Set({\r\n\t\t\tvalue: Array.from(this.signerInfos, signerInfo => signerInfo.toSchema(encodeFlag))\r\n\t\t}));\r\n\t\t//endregion\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\tversion: this.version,\r\n\t\t\tdigestAlgorithms: Array.from(this.digestAlgorithms, algorithm => algorithm.toJSON()),\r\n\t\t\tencapContentInfo: this.encapContentInfo.toJSON()\r\n\t\t};\r\n\t\t\r\n\t\tif(\"certificates\" in this)\r\n\t\t\t_object.certificates = Array.from(this.certificates, certificate => certificate.toJSON());\r\n\t\t\r\n\t\tif(\"crls\" in this)\r\n\t\t\t_object.crls = Array.from(this.crls, crl => crl.toJSON());\r\n\t\t\r\n\t\t_object.signerInfos = Array.from(this.signerInfos, signerInfo => signerInfo.toJSON());\r\n\t\t\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Verify current SignedData value\r\n\t * @param signer\r\n\t * @param data\r\n\t * @param trustedCerts\r\n\t * @param checkDate\r\n\t * @param checkChain\r\n\t * @param includeSignerCertificate\r\n\t * @param extendedMode\r\n\t * @returns {*}\r\n\t */\r\n\tverify({\r\n\t\tsigner = (-1),\r\n\t\tdata = (new ArrayBuffer(0)),\r\n\t\ttrustedCerts = [],\r\n\t\tcheckDate = (new Date()),\r\n\t\tcheckChain = false,\r\n\t\tincludeSignerCertificate = false,\r\n\t\textendedMode = false\r\n\t} = {})\r\n\t{\r\n\t\t//region Global variables \r\n\t\tlet sequence = Promise.resolve();\r\n\t\t\r\n\t\tlet messageDigestValue = new ArrayBuffer(0);\r\n\t\t\r\n\t\tlet publicKey;\r\n\t\t\r\n\t\tlet shaAlgorithm = \"\";\r\n\t\t\r\n\t\tlet signerCertificate = {};\r\n\t\t\r\n\t\tlet timestampSerial = null;\r\n\t\t\r\n\t\tlet certificatePath = [];\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get a \"crypto\" extension\r\n\t\tconst crypto = getCrypto();\r\n\t\tif(typeof crypto === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Unable to create WebCrypto object\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get a signer number\r\n\t\tif(signer === (-1))\r\n\t\t{\r\n\t\t\tif(extendedMode)\r\n\t\t\t{\r\n\t\t\t\treturn Promise.reject({\r\n\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\tcode: 1,\r\n\t\t\t\t\tmessage: \"Unable to get signer index from input parameters\",\r\n\t\t\t\t\tsignatureVerified: null,\r\n\t\t\t\t\tsignerCertificate: null,\r\n\t\t\t\t\tsignerCertificateVerified: null\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn Promise.reject(\"Unable to get signer index from input parameters\");\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check that certificates field was included in signed data\r\n\t\tif((\"certificates\" in this) === false)\r\n\t\t{\r\n\t\t\tif(extendedMode)\r\n\t\t\t{\r\n\t\t\t\treturn Promise.reject({\r\n\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\tcode: 2,\r\n\t\t\t\t\tmessage: \"No certificates attached to this signed data\",\r\n\t\t\t\t\tsignatureVerified: null,\r\n\t\t\t\t\tsignerCertificate: null,\r\n\t\t\t\t\tsignerCertificateVerified: null\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn Promise.reject(\"No certificates attached to this signed data\");\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Find a certificate for specified signer\r\n\t\tif(this.signerInfos[signer].sid instanceof IssuerAndSerialNumber)\r\n\t\t{\r\n\t\t\tsequence = sequence.then(() =>\r\n\t\t\t{\r\n\t\t\t\tfor(const certificate of this.certificates)\r\n\t\t\t\t{\r\n\t\t\t\t\tif((certificate instanceof Certificate) === false)\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\r\n\t\t\t\t\tif((certificate.issuer.isEqual(this.signerInfos[signer].sid.issuer)) &&\r\n\t\t\t\t\t\t(certificate.serialNumber.isEqual(this.signerInfos[signer].sid.serialNumber)))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tsignerCertificate = certificate;\r\n\t\t\t\t\t\treturn Promise.resolve();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(extendedMode)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn Promise.reject({\r\n\t\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\t\tcode: 3,\r\n\t\t\t\t\t\tmessage: \"Unable to find signer certificate\",\r\n\t\t\t\t\t\tsignatureVerified: null,\r\n\t\t\t\t\t\tsignerCertificate: null,\r\n\t\t\t\t\t\tsignerCertificateVerified: null\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\treturn Promise.reject(\"Unable to find signer certificate\");\r\n\t\t\t});\r\n\t\t}\r\n\t\telse // Find by SubjectKeyIdentifier\r\n\t\t{\r\n\t\t\tsequence = sequence.then(() =>\r\n\t\t\t\tPromise.all(Array.from(this.certificates.filter(certificate => (certificate instanceof Certificate)), certificate =>\r\n\t\t\t\t\tcrypto.digest({ name: \"sha-1\" }, new Uint8Array(certificate.subjectPublicKeyInfo.subjectPublicKey.valueBlock.valueHex)))\r\n\t\t\t\t).then(results =>\r\n\t\t\t\t{\r\n\t\t\t\t\tfor(const [index, certificate] of this.certificates.entries())\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif((certificate instanceof Certificate) === false)\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif(isEqualBuffer(results[index], this.signerInfos[signer].sid.valueBlock.valueHex))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tsignerCertificate = certificate;\r\n\t\t\t\t\t\t\treturn Promise.resolve();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(extendedMode)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn Promise.reject({\r\n\t\t\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\t\t\tcode: 3,\r\n\t\t\t\t\t\t\tmessage: \"Unable to find signer certificate\",\r\n\t\t\t\t\t\t\tsignatureVerified: null,\r\n\t\t\t\t\t\t\tsignerCertificate: null,\r\n\t\t\t\t\t\t\tsignerCertificateVerified: null\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn Promise.reject(\"Unable to find signer certificate\");\r\n\t\t\t\t}, () =>\r\n\t\t\t\t{\r\n\t\t\t\t\tif(extendedMode)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn Promise.reject({\r\n\t\t\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\t\t\tcode: 3,\r\n\t\t\t\t\t\t\tmessage: \"Unable to find signer certificate\",\r\n\t\t\t\t\t\t\tsignatureVerified: null,\r\n\t\t\t\t\t\t\tsignerCertificate: null,\r\n\t\t\t\t\t\t\tsignerCertificateVerified: null\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn Promise.reject(\"Unable to find signer certificate\");\r\n\t\t\t\t})\r\n\t\t\t);\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Verify internal digest in case of \"tSTInfo\" content type\r\n\t\tsequence = sequence.then(() =>\r\n\t\t{\r\n\t\t\tif(this.encapContentInfo.eContentType === \"1.2.840.113549.1.9.16.1.4\")\r\n\t\t\t{\r\n\t\t\t\t//region Check \"eContent\" precense\r\n\t\t\t\tif((\"eContent\" in this.encapContentInfo) === false)\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region Initialize TST_INFO value\r\n\t\t\t\tconst asn1 = asn1js.fromBER(this.encapContentInfo.eContent.valueBlock.valueHex);\r\n\t\t\t\tlet tstInfo;\r\n\t\t\t\t\r\n\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\ttstInfo = new TSTInfo({ schema: asn1.result });\r\n\t\t\t\t}\r\n\t\t\t\tcatch(ex)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region Change \"checkDate\" and append \"timestampSerial\"\r\n\t\t\t\tcheckDate = tstInfo.genTime;\r\n\t\t\t\ttimestampSerial = tstInfo.serialNumber.valueBlock.valueHex;\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region Check that we do have detached data content\r\n\t\t\t\tif(data.byteLength === 0)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(extendedMode)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn Promise.reject({\r\n\t\t\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\t\t\tcode: 4,\r\n\t\t\t\t\t\t\tmessage: \"Missed detached data input array\",\r\n\t\t\t\t\t\t\tsignatureVerified: null,\r\n\t\t\t\t\t\t\tsignerCertificate,\r\n\t\t\t\t\t\t\tsignerCertificateVerified: null\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn Promise.reject(\"Missed detached data input array\");\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\treturn tstInfo.verify({ data });\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn true;\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Make additional verification for signer's certificate\r\n\t\tfunction checkCA(cert)\r\n\t\t{\r\n\t\t\t/// <param name=\"cert\" type=\"in_window.org.pkijs.simpl.CERT\">Certificate to find CA flag for</param>\r\n\t\t\t\r\n\t\t\t//region Do not include signer's certificate\r\n\t\t\tif((cert.issuer.isEqual(signerCertificate.issuer) === true) && (cert.serialNumber.isEqual(signerCertificate.serialNumber) === true))\r\n\t\t\t\treturn null;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tlet isCA = false;\r\n\t\t\t\r\n\t\t\tif(\"extensions\" in cert)\r\n\t\t\t{\r\n\t\t\t\tfor(const extension of cert.extensions)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(extension.extnID === \"2.5.29.19\") // BasicConstraints\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(\"cA\" in extension.parsedValue)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(extension.parsedValue.cA === true)\r\n\t\t\t\t\t\t\t\tisCA = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(isCA)\r\n\t\t\t\treturn cert;\r\n\t\t\t\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\t\r\n\t\tif(checkChain)\r\n\t\t{\r\n\t\t\tsequence = sequence.then(result =>\r\n\t\t\t{\r\n\t\t\t\t//region Verify result of previous operation\r\n\t\t\t\tif(result === false)\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\tconst promiseResults = Array.from(this.certificates.filter(certificate => (certificate instanceof Certificate)), certificate => checkCA(certificate));\r\n\t\t\t\t\r\n\t\t\t\tconst certificateChainEngine = new CertificateChainValidationEngine({\r\n\t\t\t\t\tcheckDate,\r\n\t\t\t\t\tcerts: Array.from(promiseResults.filter(_result => (_result !== null))),\r\n\t\t\t\t\ttrustedCerts\r\n\t\t\t\t});\r\n\t\t\t\t\r\n\t\t\t\tcertificateChainEngine.certs.push(signerCertificate);\r\n\t\t\t\t\r\n\t\t\t\tif(\"crls\" in this)\r\n\t\t\t\t{\r\n\t\t\t\t\tfor(const crl of this.crls)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(crl instanceof CertificateRevocationList)\r\n\t\t\t\t\t\t\tcertificateChainEngine.crls.push(crl);\r\n\t\t\t\t\t\telse // Assumed \"revocation value\" has \"OtherRevocationInfoFormat\"\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(crl.otherRevInfoFormat === \"1.3.6.1.5.5.7.48.1.1\") // Basic OCSP response\r\n\t\t\t\t\t\t\t\tcertificateChainEngine.ocsps.push(new BasicOCSPResponse({ schema: crl.otherRevInfo }));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(\"ocsps\" in this)\r\n\t\t\t\t\tcertificateChainEngine.ocsps.push(...(this.ocsps));\r\n\t\t\t\t\r\n\t\t\t\treturn certificateChainEngine.verify().then(verificationResult =>\r\n\t\t\t\t{\r\n\t\t\t\t\tif(\"certificatePath\" in verificationResult)\r\n\t\t\t\t\t\tcertificatePath = verificationResult.certificatePath;\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(verificationResult.result === true)\r\n\t\t\t\t\t\treturn Promise.resolve(true);\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(extendedMode)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn Promise.reject({\r\n\t\t\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\t\t\tcode: 5,\r\n\t\t\t\t\t\t\tmessage: `Validation of signer's certificate failed: ${verificationResult.resultMessage}`,\r\n\t\t\t\t\t\t\tsignatureVerified: null,\r\n\t\t\t\t\t\t\tsignerCertificate,\r\n\t\t\t\t\t\t\tsignerCertificateVerified: false\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn Promise.reject(\"Validation of signer's certificate failed\");\r\n\t\t\t\t}, error =>\r\n\t\t\t\t{\r\n\t\t\t\t\tif(extendedMode)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn Promise.reject({\r\n\t\t\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\t\t\tcode: 5,\r\n\t\t\t\t\t\t\tmessage: `Validation of signer's certificate failed with error: ${((error instanceof Object) ? error.resultMessage : error)}`,\r\n\t\t\t\t\t\t\tsignatureVerified: null,\r\n\t\t\t\t\t\t\tsignerCertificate,\r\n\t\t\t\t\t\t\tsignerCertificateVerified: false\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn Promise.reject(`Validation of signer's certificate failed with error: ${((error instanceof Object) ? error.resultMessage : error)}`);\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Find signer's hashing algorithm\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\t//region Verify result of previous operation\r\n\t\t\tif(result === false)\r\n\t\t\t\treturn false;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tconst signerInfoHashAlgorithm = getAlgorithmByOID(this.signerInfos[signer].digestAlgorithm.algorithmId);\r\n\t\t\tif((\"name\" in signerInfoHashAlgorithm) === false)\r\n\t\t\t{\r\n\t\t\t\tif(extendedMode)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn Promise.reject({\r\n\t\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\t\tcode: 7,\r\n\t\t\t\t\t\tmessage: `Unsupported signature algorithm: ${this.signerInfos[signer].digestAlgorithm.algorithmId}`,\r\n\t\t\t\t\t\tsignatureVerified: null,\r\n\t\t\t\t\t\tsignerCertificate,\r\n\t\t\t\t\t\tsignerCertificateVerified: true\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\treturn Promise.reject(`Unsupported signature algorithm: ${this.signerInfos[signer].digestAlgorithm.algorithmId}`);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tshaAlgorithm = signerInfoHashAlgorithm.name;\r\n\t\t\t\r\n\t\t\treturn true;\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create correct data block for verification\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\t//region Verify result of previous operation\r\n\t\t\tif(result === false)\r\n\t\t\t\treturn false;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tif(\"eContent\" in this.encapContentInfo) // Attached data\r\n\t\t\t{\r\n\t\t\t\tif((this.encapContentInfo.eContent.idBlock.tagClass === 1) &&\r\n\t\t\t\t\t(this.encapContentInfo.eContent.idBlock.tagNumber === 4))\r\n\t\t\t\t{\r\n\t\t\t\t\tif(this.encapContentInfo.eContent.idBlock.isConstructed === false)\r\n\t\t\t\t\t\tdata = this.encapContentInfo.eContent.valueBlock.valueHex;\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfor(const contentValue of this.encapContentInfo.eContent.valueBlock.value)\r\n\t\t\t\t\t\t\tdata = utilConcatBuf(data, contentValue.valueBlock.valueHex);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t\tdata = this.encapContentInfo.eContent.valueBlock.valueBeforeDecode;\r\n\t\t\t}\r\n\t\t\telse // Detached data\r\n\t\t\t{\r\n\t\t\t\tif(data.byteLength === 0) // Check that \"data\" already provided by function parameter\r\n\t\t\t\t{\r\n\t\t\t\t\tif(extendedMode)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn Promise.reject({\r\n\t\t\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\t\t\tcode: 8,\r\n\t\t\t\t\t\t\tmessage: \"Missed detached data input array\",\r\n\t\t\t\t\t\t\tsignatureVerified: null,\r\n\t\t\t\t\t\t\tsignerCertificate,\r\n\t\t\t\t\t\t\tsignerCertificateVerified: true\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn Promise.reject(\"Missed detached data input array\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(\"signedAttrs\" in this.signerInfos[signer])\r\n\t\t\t{\r\n\t\t\t\t//region Check mandatory attributes\r\n\t\t\t\tlet foundContentType = false;\r\n\t\t\t\tlet foundMessageDigest = false;\r\n\t\t\t\t\r\n\t\t\t\tfor(const attribute of this.signerInfos[signer].signedAttrs.attributes)\r\n\t\t\t\t{\r\n\t\t\t\t\t//region Check that \"content-type\" attribute exists\r\n\t\t\t\t\tif(attribute.type === \"1.2.840.113549.1.9.3\")\r\n\t\t\t\t\t\tfoundContentType = true;\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Check that \"message-digest\" attribute exists\r\n\t\t\t\t\tif(attribute.type === \"1.2.840.113549.1.9.4\")\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfoundMessageDigest = true;\r\n\t\t\t\t\t\tmessageDigestValue = attribute.values[0].valueBlock.valueHex;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Speed-up searching\r\n\t\t\t\t\tif(foundContentType && foundMessageDigest)\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(foundContentType === false)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(extendedMode)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn Promise.reject({\r\n\t\t\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\t\t\tcode: 9,\r\n\t\t\t\t\t\t\tmessage: \"Attribute \\\"content-type\\\" is a mandatory attribute for \\\"signed attributes\\\"\",\r\n\t\t\t\t\t\t\tsignatureVerified: null,\r\n\t\t\t\t\t\t\tsignerCertificate,\r\n\t\t\t\t\t\t\tsignerCertificateVerified: true\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn Promise.reject(\"Attribute \\\"content-type\\\" is a mandatory attribute for \\\"signed attributes\\\"\");\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(foundMessageDigest === false)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(extendedMode)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn Promise.reject({\r\n\t\t\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\t\t\tcode: 10,\r\n\t\t\t\t\t\t\tmessage: \"Attribute \\\"message-digest\\\" is a mandatory attribute for \\\"signed attributes\\\"\",\r\n\t\t\t\t\t\t\tsignatureVerified: null,\r\n\t\t\t\t\t\t\tsignerCertificate,\r\n\t\t\t\t\t\t\tsignerCertificateVerified: true\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn Promise.reject(\"Attribute \\\"message-digest\\\" is a mandatory attribute for \\\"signed attributes\\\"\");\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn true;\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Import public key from signer's certificate\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\t//region Verify result of previous operation\r\n\t\t\tif(result === false)\r\n\t\t\t\treturn false;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Get information about public key algorithm and default parameters for import\r\n\t\t\tlet algorithmId;\r\n\t\t\tif(signerCertificate.signatureAlgorithm.algorithmId === \"1.2.840.113549.1.1.10\")\r\n\t\t\t\talgorithmId = signerCertificate.signatureAlgorithm.algorithmId;\r\n\t\t\telse\r\n\t\t\t\talgorithmId = signerCertificate.subjectPublicKeyInfo.algorithm.algorithmId;\r\n\t\t\t\r\n\t\t\tconst algorithmObject = getAlgorithmByOID(algorithmId);\r\n\t\t\tif((\"name\" in algorithmObject) === false)\r\n\t\t\t{\r\n\t\t\t\tif(extendedMode)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn Promise.reject({\r\n\t\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\t\tcode: 11,\r\n\t\t\t\t\t\tmessage: `Unsupported public key algorithm: ${algorithmId}`,\r\n\t\t\t\t\t\tsignatureVerified: null,\r\n\t\t\t\t\t\tsignerCertificate,\r\n\t\t\t\t\t\tsignerCertificateVerified: true\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\treturn Promise.reject(`Unsupported public key algorithm: ${algorithmId}`);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tconst algorithm = getAlgorithmParameters(algorithmObject.name, \"importkey\");\r\n\t\t\tif(\"hash\" in algorithm.algorithm)\r\n\t\t\t\talgorithm.algorithm.hash.name = shaAlgorithm;\r\n\t\t\t\r\n\t\t\t//region Special case for ECDSA\r\n\t\t\tif(algorithmObject.name === \"ECDSA\")\r\n\t\t\t{\r\n\t\t\t\t//region Get information about named curve\r\n\t\t\t\tlet algorithmParamsChecked = false;\r\n\t\t\t\t\r\n\t\t\t\tif((\"algorithmParams\" in signerCertificate.subjectPublicKeyInfo.algorithm) === true)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(\"idBlock\" in signerCertificate.subjectPublicKeyInfo.algorithm.algorithmParams)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif((signerCertificate.subjectPublicKeyInfo.algorithm.algorithmParams.idBlock.tagClass === 1) && (signerCertificate.subjectPublicKeyInfo.algorithm.algorithmParams.idBlock.tagNumber === 6))\r\n\t\t\t\t\t\t\talgorithmParamsChecked = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(algorithmParamsChecked === false)\r\n\t\t\t\t\treturn Promise.reject(\"Incorrect type for ECDSA public key parameters\");\r\n\t\t\t\t\r\n\t\t\t\tconst curveObject = getAlgorithmByOID(signerCertificate.subjectPublicKeyInfo.algorithm.algorithmParams.valueBlock.toString());\r\n\t\t\t\tif((\"name\" in curveObject) === false)\r\n\t\t\t\t\treturn Promise.reject(`Unsupported named curve algorithm: ${signerCertificate.subjectPublicKeyInfo.algorithm.algorithmParams.valueBlock.toString()}`);\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\talgorithm.algorithm.namedCurve = curveObject.name;\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tconst publicKeyInfoSchema = signerCertificate.subjectPublicKeyInfo.toSchema();\r\n\t\t\tconst publicKeyInfoBuffer = publicKeyInfoSchema.toBER(false);\r\n\t\t\tconst publicKeyInfoView = new Uint8Array(publicKeyInfoBuffer);\r\n\t\t\t\r\n\t\t\treturn crypto.importKey(\"spki\", publicKeyInfoView, algorithm.algorithm, true, algorithm.usages);\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Verify signer's signature\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\t//region Verify result of previous operation\r\n\t\t\tif(typeof result === \"boolean\")\r\n\t\t\t\treturn false;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tpublicKey = result;\r\n\t\t\t\r\n\t\t\t//region Verify \"message-digest\" attribute in case of \"signedAttrs\"\r\n\t\t\tif(\"signedAttrs\" in this.signerInfos[signer])\r\n\t\t\t\treturn crypto.digest(shaAlgorithm, new Uint8Array(data));\r\n\t\t\t\r\n\t\t\treturn true;\r\n\t\t\t//endregion\r\n\t\t}).then(result =>\r\n\t\t{\r\n\t\t\t//region Verify result of previous operation\r\n\t\t\tif(result === false)\r\n\t\t\t\treturn false;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tif(\"signedAttrs\" in this.signerInfos[signer])\r\n\t\t\t{\r\n\t\t\t\tif(isEqualBuffer(result, messageDigestValue))\r\n\t\t\t\t{\r\n\t\t\t\t\tdata = this.signerInfos[signer].signedAttrs.encodedValue;\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn true;\r\n\t\t}).then(result =>\r\n\t\t{\r\n\t\t\t//region Check result of previous operation\r\n\t\t\tif(result === false)\r\n\t\t\t\treturn false;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Get default algorithm parameters for verification\r\n\t\t\tconst algorithm = getAlgorithmParameters(publicKey.algorithm.name, \"verify\");\r\n\t\t\tif(\"hash\" in algorithm.algorithm)\r\n\t\t\t\talgorithm.algorithm.hash.name = shaAlgorithm;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Special case for RSA-PSS\r\n\t\t\tif(publicKey.algorithm.name === \"RSA-PSS\")\r\n\t\t\t{\r\n\t\t\t\tlet pssParameters;\r\n\t\t\t\t\r\n\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\tpssParameters = new RSASSAPSSParams({ schema: this.signerInfos[signer].signatureAlgorithm.algorithmParams });\r\n\t\t\t\t}\r\n\t\t\t\tcatch(ex)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(extendedMode)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn Promise.reject({\r\n\t\t\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\t\t\tcode: 12,\r\n\t\t\t\t\t\t\tmessage: ex,\r\n\t\t\t\t\t\t\tsignatureVerified: null,\r\n\t\t\t\t\t\t\tsignerCertificate,\r\n\t\t\t\t\t\t\tsignerCertificateVerified: true\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn Promise.reject(ex);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(\"saltLength\" in pssParameters)\r\n\t\t\t\t\talgorithm.algorithm.saltLength = pssParameters.saltLength;\r\n\t\t\t\telse\r\n\t\t\t\t\talgorithm.algorithm.saltLength = 20;\r\n\t\t\t\t\r\n\t\t\t\tlet hashName = \"SHA-1\";\r\n\t\t\t\t\r\n\t\t\t\tif(\"hashAlgorithm\" in pssParameters)\r\n\t\t\t\t{\r\n\t\t\t\t\tconst hashAlgorithm = getAlgorithmByOID(pssParameters.hashAlgorithm.algorithmId);\r\n\t\t\t\t\tif((\"name\" in hashAlgorithm) === false)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(extendedMode)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\treturn Promise.reject({\r\n\t\t\t\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\t\t\t\tcode: 13,\r\n\t\t\t\t\t\t\t\tmessage: `Unrecognized hash algorithm: ${pssParameters.hashAlgorithm.algorithmId}`,\r\n\t\t\t\t\t\t\t\tsignatureVerified: null,\r\n\t\t\t\t\t\t\t\tsignerCertificate,\r\n\t\t\t\t\t\t\t\tsignerCertificateVerified: true\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\treturn Promise.reject(`Unrecognized hash algorithm: ${pssParameters.hashAlgorithm.algorithmId}`);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\thashName = hashAlgorithm.name;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\talgorithm.algorithm.hash.name = hashName;\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Special case for ECDSA signatures\r\n\t\t\tlet signatureValue = this.signerInfos[signer].signature.valueBlock.valueHex;\r\n\t\t\t\r\n\t\t\tif(publicKey.algorithm.name === \"ECDSA\")\r\n\t\t\t{\r\n\t\t\t\tconst asn1 = asn1js.fromBER(signatureValue);\r\n\t\t\t\tsignatureValue = createECDSASignatureFromCMS(asn1.result);\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\treturn crypto.verify(algorithm.algorithm,\r\n\t\t\t\tpublicKey,\r\n\t\t\t\tnew Uint8Array(signatureValue),\r\n\t\t\t\tnew Uint8Array(data));\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Make a final result\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\tif(extendedMode)\r\n\t\t\t{\r\n\t\t\t\treturn {\r\n\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\tcode: 14,\r\n\t\t\t\t\tmessage: \"\",\r\n\t\t\t\t\tsignatureVerified: result,\r\n\t\t\t\t\tsignerCertificate,\r\n\t\t\t\t\ttimestampSerial,\r\n\t\t\t\t\tsignerCertificateVerified: true,\r\n\t\t\t\t\tcertificatePath\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn result;\r\n\t\t}, error =>\r\n\t\t{\r\n\t\t\tif(extendedMode)\r\n\t\t\t{\r\n\t\t\t\tif(\"code\" in error)\r\n\t\t\t\t\treturn Promise.reject(error);\r\n\t\t\t\t\r\n\t\t\t\treturn Promise.reject({\r\n\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\tcode: 15,\r\n\t\t\t\t\tmessage: `Error during verification: ${error.message}`,\r\n\t\t\t\t\tsignatureVerified: null,\r\n\t\t\t\t\tsignerCertificate,\r\n\t\t\t\t\ttimestampSerial,\r\n\t\t\t\t\tsignerCertificateVerified: true\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn Promise.reject(error);\r\n\t\t});\r\n\t\t//endregion \r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Signing current SignedData\r\n\t * @param {key} privateKey Private key for \"subjectPublicKeyInfo\" structure\r\n\t * @param {number} signerIndex Index number (starting from 0) of signer index to make signature for\r\n\t * @param {string} [hashAlgorithm=\"SHA-1\"] Hashing algorithm. Default SHA-1\r\n\t * @param {ArrayBuffer} [data] Detached data\r\n\t * @returns {*}\r\n\t */\r\n\tsign(privateKey, signerIndex, hashAlgorithm = \"SHA-1\", data = (new ArrayBuffer(0)))\r\n\t{\r\n\t\t//region Initial checking\r\n\t\tif(typeof privateKey === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Need to provide a private key for signing\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\tlet parameters;\r\n\t\t\r\n\t\tconst engine = getEngine();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Simple check for supported algorithm\r\n\t\tconst hashAlgorithmOID = getOIDByAlgorithm({ name: hashAlgorithm });\r\n\t\tif(hashAlgorithmOID === \"\")\r\n\t\t\treturn Promise.reject(`Unsupported hash algorithm: ${hashAlgorithm}`);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Append information about hash algorithm\r\n\t\tif((this.digestAlgorithms.filter(algorithm => algorithm.algorithmId === hashAlgorithmOID)).length === 0)\r\n\t\t{\r\n\t\t\tthis.digestAlgorithms.push(new AlgorithmIdentifier({\r\n\t\t\t\talgorithmId: hashAlgorithmOID,\r\n\t\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\tthis.signerInfos[signerIndex].digestAlgorithm = new AlgorithmIdentifier({\r\n\t\t\talgorithmId: hashAlgorithmOID,\r\n\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get a \"default parameters\" for current algorithm and set correct signature algorithm\r\n\t\tsequence = sequence.then(() => engine.subtle.getSignatureParameters(privateKey, hashAlgorithm));\r\n\t\t\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\tparameters = result.parameters;\r\n\t\t\tthis.signerInfos[signerIndex].signatureAlgorithm = result.signatureAlgorithm;\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create TBS data for signing\r\n\t\tsequence = sequence.then(() =>\r\n\t\t{\r\n\t\t\tif(\"signedAttrs\" in this.signerInfos[signerIndex])\r\n\t\t\t{\r\n\t\t\t\tif(this.signerInfos[signerIndex].signedAttrs.encodedValue.byteLength !== 0)\r\n\t\t\t\t\tdata = this.signerInfos[signerIndex].signedAttrs.encodedValue;\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tdata = this.signerInfos[signerIndex].signedAttrs.toSchema(true).toBER(false);\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Change type from \"[0]\" to \"SET\" acordingly to standard\r\n\t\t\t\t\tconst view = new Uint8Array(data);\r\n\t\t\t\t\tview[0] = 0x31;\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tif(\"eContent\" in this.encapContentInfo) // Attached data\r\n\t\t\t\t{\r\n\t\t\t\t\tif((this.encapContentInfo.eContent.idBlock.tagClass === 1) &&\r\n\t\t\t\t\t\t(this.encapContentInfo.eContent.idBlock.tagNumber === 4))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(this.encapContentInfo.eContent.idBlock.isConstructed === false)\r\n\t\t\t\t\t\t\tdata = this.encapContentInfo.eContent.valueBlock.valueHex;\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tfor(const content of this.encapContentInfo.eContent.valueBlock.value)\r\n\t\t\t\t\t\t\t\tdata = utilConcatBuf(data, content.valueBlock.valueHex);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tdata = this.encapContentInfo.eContent.valueBlock.valueBeforeDecode;\r\n\t\t\t\t}\r\n\t\t\t\telse // Detached data\r\n\t\t\t\t{\r\n\t\t\t\t\tif(data.byteLength === 0) // Check that \"data\" already provided by function parameter\r\n\t\t\t\t\t\treturn Promise.reject(\"Missed detached data input array\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn Promise.resolve();\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Signing TBS data on provided private key\r\n\t\tsequence = sequence.then(() => engine.subtle.signWithPrivateKey(data, privateKey, parameters));\r\n\t\t\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\tthis.signerInfos[signerIndex].signature = new asn1js.OctetString({ valueHex: result });\r\n\t\t\t\r\n\t\t\treturn result;\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}